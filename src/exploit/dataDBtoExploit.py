from libs.MySQLdb import MySQLdb
from datetime import date
from libs.funcs import toSpanishDate

class dataDBToExploit(object):
    def __init__(self):
        self.sql=MySQLdb(self.credentials)
        self.sql.connectToTreatmentDB()
        self.curatedTable=self.sql.treamentTable
        self.excelTable=[]
        self.ORIGINAL_TABLE=[]
        self.loadTableList()

    def loadTableList(self):
        if self.ORIGINAL_TABLE:
            self.excelTable=self.ORIGINAL_TABLE
        else:
            self.excelTable=[]
            self.sql.loadTreatmentTable()
            for i in self.sql.treamentTable:
                request=None
                completeReception=None
                QA1=""
                daysFromQA1=None
                QA2=""
                daysFromQA2=None
                endCalc=""
                daysFromEndCalc=None
                emision=""
                daysFromEmision=None
                for a in self.fromSQLStringToDateList(i[2]):
                    match int(a[0]):
                        case 1:
                            request=toSpanishDate(int(a[1]))
                        case 2:
                            completeReception=toSpanishDate(int(a[1]))
                        case 4:
                            if not(QA1):
                                QA1=toSpanishDate(int(a[1]))
                                daysFromQA1=int(a[2])
                            else:
                                QA2=toSpanishDate(int(a[1]))
                                daysFromQA2=int(a[2])
                        case 5:
                            endCalc=toSpanishDate(int(a[1]))
                            daysFromEndCalc=int(a[2])
                        case 6:
                            emision=toSpanishDate(int(a[1]))
                            daysFromEmision=int(a[2])
                self.excelTable.append((i[0], 
                    i[1]+1,
                    i[3],
                    i[5],
                    i[4],
                    request,
                    completeReception,
                    QA1,
                    daysFromQA1,
                    QA2,
                    daysFromQA2,
                    endCalc,
                    daysFromEndCalc,emision,
                    daysFromEmision))
            self.ORIGINAL_TABLE=self.excelTable     #CONSTANT
    
    def filterByNush(self, nush):
        newTable=[]
        for i in range(len(self.excelTable)):
            if self.excelTable[i][0]==int(nush):
                newTable.append(self.excelTable[i])
        self.excelTable=newTable
    
    def filterByTreatmentType(self, treatmentType):
        newTable=[]
        for i in range(len(self.excelTable)):
            if int(self.excelTable[i][2])==int(treatmentType):
                newTable.append(self.excelTable[i])
        self.excelTable=newTable

    def filterByDate(self, beginDate, endDate):
        newTable=[]
        for i in range(len(self.excelTable)):
            if self.excelTable[i][6]!=None:
                if beginDate<=self.fromSpanishDateToOrdinal(self.excelTable[i][6])<=endDate:
                    newTable.append(self.excelTable[i])
        self.excelTable=newTable

    def filterByDoctor(self, doctor):
        if doctor!="Sin escoger":
            newTable=[]
            for i in range(len(self.excelTable)):
                if (self.excelTable[i][4]==doctor):
                    newTable.append(self.excelTable[i])
            self.excelTable=newTable

    def filterByRadioPhysicists(self, radiophysicist):
        if radiophysicist!="Sin escoger":
            newTable=[]
            for i in range(len(self.excelTable)):
                if (self.excelTable[i][3]==radiophysicist):
                    newTable.append(self.excelTable[i])
            self.excelTable=newTable

    def fromSQLStringToDateList(self, SQLString):
        #Transform a string retrieved from SQL to a DateList
        rawList=str(SQLString).split(",")
        processedList=[]
        for i in rawList:
            dateSplit=i.split(":")
            typeOfDate=int(dateSplit[0])
            date=int(dateSplit[1])
            daysFromReception=int(dateSplit[2])
            processedTuple=(typeOfDate, date, daysFromReception)
            processedList.append(processedTuple)
        return processedList
    
    def fromSpanishDateToOrdinal(self, spanishDate):
        dateList=spanishDate.split("-")
        ordinalDate=date.fromisoformat(dateList[2]+"-"+dateList[0]+"-"+dateList[1]).toordinal()
        return ordinalDate

    def getAttendings(self):
        self.doctors=["Sin escoger"]
        self.radiophysicists=["Sin escoger"]
        for i in self.sql.treamentTable:
            if not((i[4])in(self.doctors))and(i[4]):
                self.doctors.append(i[4])
            if not((i[5])in(self.radiophysicists))and(i[5]):
                self.radiophysicists.append(i[5])