from libs.MySQLdb import MySQLdb
from datetime import date

class dataDBToExploit(object):
    def __init__(self):
        self.sql=MySQLdb(self.credentials)
        self.sql.connectToTreatmentDB()
        self.curatedTable=self.sql.treamentTable
        self.excelTable=[]
        self.fromDBtoTableWidget()

    def fromDBtoTableWidget(self):
        self.excelTable=[]
        self.sql.loadTreatmentTable()
        for i in self.sql.treamentTable:
            request=None
            completeReception=None
            QA1=""
            daysFromQA1=None
            QA2=""
            daysFromQA2=None
            endCalc=""
            daysFromEndCalc=None
            emision=""
            daysFromEmision=None
            for a in self.fromSQLStringToDateList(i[2]):
                match int(a[0]):
                    case 1:
                        request=date.fromordinal(a[1]).strftime("%m-%d-%Y")
                    case 2:
                        completeReception=date.fromordinal(a[1]).strftime("%m-%d-%Y")
                    case 4:
                        if not(QA1):
                            QA1=date.fromordinal(int(a[1])).strftime("%m-%d-%Y")
                            daysFromQA1=int(a[2])
                        else:
                            QA2=date.fromordinal(int(a[1])).strftime("%m-%d-%Y")
                            daysFromQA2=int(a[2])
                    case 5:
                        endCalc=date.fromordinal(int(a[1])).strftime("%m-%d-%Y")
                        daysFromEndCalc=int(a[2])
                    case 6:
                        emision=date.fromordinal(int(a[1])).strftime("%m-%d-%Y")
                        daysFromEmision=int(a[2])
            self.excelTable.append((i[0], i[1]+1, i[3],request,completeReception,QA1,daysFromQA1,QA2,daysFromQA2,endCalc,daysFromEndCalc,emision,daysFromEmision))
    
    def filterByNush(self, nush):
        newTable=[]
        for i in range(len(self.excelTable)):
            if self.excelTable[i][0]==int(nush):
                newTable.append(self.excelTable[i])
        self.excelTable=newTable
    
    def filterByTreatmentType(self, treatmentType):
        newTable=[]
        for i in range(len(self.excelTable)):
            if int(self.excelTable[i][2])==int(treatmentType):
                newTable.append(self.excelTable[i])
        self.excelTable=newTable

    def filterByDate(self, beginDate, endDate):
        newTable=[]
        for i in range(len(self.excelTable)):
            if self.excelTable[i][4]!=None:
                if beginDate<=self.fromSpanishDateToOrdinal(self.excelTable[i][4])<=endDate:
                    newTable.append(self.excelTable[i])
        self.excelTable=newTable

    def fromSQLStringToDateList(self, SQLString):
        #Transform a string retrieved from SQL to a DateList
        rawList=str(SQLString).split(",")
        processedList=[]
        for i in rawList:
            dateSplit=i.split(":")
            typeOfDate=int(dateSplit[0])
            date=int(dateSplit[1])
            daysFromReception=int(dateSplit[2])
            processedTuple=(typeOfDate, date, daysFromReception)
            processedList.append(processedTuple)
        return processedList
    
    def fromSpanishDateToOrdinal(self, spanishDate):
        dateList=spanishDate.split("-")
        ordinalDate=date.fromisoformat(dateList[2]+"-"+dateList[0]+"-"+dateList[1]).toordinal()
        return ordinalDate