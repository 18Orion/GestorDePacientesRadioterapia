from libs.MySQLdb import MySQLdb
from datetime import date
from libs.funcs import toSpanishDate
from libs.globalVars import TREATMENT_OPTIONS, DATE_OPTIONS
from libs.funcs import formatNUSHA, toOrdinal

class dataDBToExploit(object):
    def __init__(self):
        self.sql=MySQLdb(self.credentials)
        self.sql.connectToTreatmentDB() 
        self.excelTable=[]                          #List to export
        self.ORIGINAL_TABLE=[]                      #A list to cache the database thus not having to update it
        self.loadTableList()                        #Loads the table

    def loadTableList(self):
        if self.ORIGINAL_TABLE:
            self.excelTable=self.ORIGINAL_TABLE     #If table is already cached reloads it
        else:
            self.excelTable=[]                      
            self.sql.loadTreatmentTable()
            for i in self.sql.treamentTable:
                #Defines the variables
                request=None
                completeReception=None
                QA1=""
                daysFromQA1=None
                QA2=""
                daysFromQA2=None
                endCalc1=""
                daysFromEndCalc1=None
                endCalc2=""
                daysFromEndCalc2=None
                emision=""
                daysFromEmision=None
                for a in self.fromSQLStringToDateList(i[2]):
                    #Loads the dates and transform them to spanish format
                    match int(a[0]):
                        case 1:
                            request=toSpanishDate(int(a[1]))
                        case 2:
                            completeReception=toSpanishDate(int(a[1]))
                        case 4:
                            if not(endCalc1):
                                endCalc1=toSpanishDate(int(a[1]))
                                daysFromEndCalc1=int(a[2])
                            elif not(endCalc2):
                                endCalc2=toSpanishDate(int(a[1]))
                                daysFromEndCalc2=int(a[2])
                        case 5:
                            if not(QA1):
                                QA1=toSpanishDate(int(a[1]))
                                daysFromQA1=int(a[2])
                            elif not(QA2):
                                QA2=toSpanishDate(int(a[1]))
                                daysFromQA2=int(a[2])
                        case 6:
                            emision=toSpanishDate(int(a[1]))
                            daysFromEmision=int(a[2])
                #Appends the resulting tuple to the excel table
                self.excelTable.append((formatNUSHA(i[0]), 
                    i[1]+1,
                    TREATMENT_OPTIONS[i[3]],
                    i[5],
                    i[4],
                    request,
                    completeReception,
                    endCalc1,
                    daysFromEndCalc1,
                    QA1,
                    daysFromQA1,
                    endCalc2,
                    daysFromEndCalc2,
                    QA2,
                    daysFromQA2,
                    emision,
                    daysFromEmision))
            self.ORIGINAL_TABLE=self.excelTable     #CONSTANT
    
    def filterByNush(self, nush):
        newTable=[]                 #Creates a new temporal list
        for i in range(len(self.excelTable)):
            if self.excelTable[i][0]==nush:     #If the NUSHA is the same appends it to the list
                newTable.append(self.excelTable[i])
        self.excelTable=newTable                #Sets the value of the excel table to the filtered table
    
    def filterByTreatmentType(self, treatmentType):
        newTable=[]                 #Creates a new temporal list
        for i in range(len(self.excelTable)):
            if self.excelTable[i][2]==TREATMENT_OPTIONS[treatmentType]: #If the treatment type is the same appends it to the list
                newTable.append(self.excelTable[i])
        self.excelTable=newTable                #Sets the value of the excel table to the filtered table

    def filterByDate(self, beginDate, endDate):
        newTable=[]                 #Creates a new temporal list
        for i in range(len(self.excelTable)):
            if self.excelTable[i][6]!=None:
                if beginDate<=toOrdinal(self.excelTable[i][6], True)<=endDate:
                    newTable.append(self.excelTable[i])
        self.excelTable=newTable                #Sets the value of the excel table to the filtered table

    def filterByDoctor(self, doctor):
        if doctor!="Sin escoger":
            newTable=[]                 #Creates a new temporal list
            for i in range(len(self.excelTable)):
                if (self.excelTable[i][4]==doctor): #If the doctor is the same it adds the tuple to the list
                    newTable.append(self.excelTable[i])
            self.excelTable=newTable                #Sets the value of the excel table to the filtered table

    def filterByRadioPhysicists(self, radiophysicist):
        if radiophysicist!="Sin escoger":
            newTable=[]                 #Creates a new temporal list
            for i in range(len(self.excelTable)):
                if (self.excelTable[i][3]==radiophysicist): #If the radiophysicist is the same it adds the tuple to the list
                    newTable.append(self.excelTable[i])
            self.excelTable=newTable                #Sets the value of the excel table to the filtered table

    def fromSQLStringToDateList(self, SQLString):
        #Transform a string retrieved from SQL to a DateList
        rawList=str(SQLString).split(",")
        processedList=[]
        for i in rawList:
            dateSplit=i.split(":")
            typeOfDate=int(dateSplit[0])
            date=int(dateSplit[1])
            daysFromReception=int(dateSplit[2])
            processedTuple=(typeOfDate, date, daysFromReception)
            processedList.append(processedTuple)
        return processedList

    def getAttendings(self):
        self.doctors=["Sin escoger"]
        self.radiophysicists=["Sin escoger"]
        #If the name of the doctor or radiophysicist does not exist it adds it
        for i in self.sql.treamentTable:
            if not((i[4])in(self.doctors))and(i[4]):
                self.doctors.append(i[4])
            if not((i[5])in(self.radiophysicists))and(i[5]):
                self.radiophysicists.append(i[5])